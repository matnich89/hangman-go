// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	game "hangman/game"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *Store) Add(_a0 *game.Game) bool {
	ret := _m.Called(_a0)

	var r0 bool 
	if rf, ok := ret.Get(0).(func(*game.Game) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AddPlayer provides a mock function with given fields: id
func (_m *Store) AddPlayer(id uuid.UUID) int {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(uuid.UUID) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *Store) Get(id uuid.UUID) *game.Game {
	ret := _m.Called(id)

	var r0 *game.Game
	if rf, ok := ret.Get(0).(func(uuid.UUID) *game.Game); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*game.Game)
		}
	}

	return r0
}

// IsValidGameId provides a mock function with given fields: id
func (_m *Store) IsValidGameId(id uuid.UUID) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
