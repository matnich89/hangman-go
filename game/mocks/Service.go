// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	game "hangman/game"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddPlayer provides a mock function with given fields: id
func (_m *Service) AddPlayer(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields:
func (_m *Service) Create() *game.Game {
	ret := _m.Called()

	var r0 *game.Game
	if rf, ok := ret.Get(0).(func() *game.Game); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*game.Game)
		}
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *Service) Get(id uuid.UUID) (*game.Game, error) {
	ret := _m.Called(id)

	var r0 *game.Game
	if rf, ok := ret.Get(0).(func(uuid.UUID) *game.Game); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*game.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Guess provides a mock function with given fields: id, letter
func (_m *Service) Guess(id uuid.UUID, letter string) (*game.Game, error) {
	ret := _m.Called(id, letter)

	var r0 *game.Game
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) *game.Game); ok {
		r0 = rf(id, letter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*game.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(id, letter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
